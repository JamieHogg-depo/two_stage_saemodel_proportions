# Add elements to sample_agg
sample_agg <- b_est$sa2_direct %>%
mutate(cisize = 2*1.96*HT_SE,
HT_lower = HT - 1.96 * HT_SE,
HT_upper = HT + 1.96 * HT_SE,
OR = getHT(HT),
OR_lower = getHT(HT_lower),
OR_upper = getHT(HT_upper))
sample_agg <- sample_agg %>%
bind_rows(data.frame(ps_area = c(1:1630)[!1:1630 %in% sample_agg$ps_area]))
# Get missing geometries (areas we didn't estimate for)
temp <- b_est$summ_mu %>%
right_join(.,map_sa2, by = "ps_area") %>%
st_as_sf() %>%
filter(is.na(model)) %>%
dplyr::select(SA2_MAIN16, geometry)
mis_geos <- data.frame(SA2_MAIN16 = rep(temp$SA2_MAIN16, 4),
geometry = rep(temp$geometry, 4),
model = rep(c("TSLN", "LOG", "ELN", "Direct"), 67))
rm(temp)
# City Insets
lims <- data.frame(
xmin = c(152.6, 150.35, 144.5, 115.45, 138.1, 146.8, 148.6, 130.3),
xmax = c(153.6, 151.35, 145.5, 116.45, 139.1, 147.8, 149.6, 131.3),
ymin = -c(28, 34.4, 38.4, 32.5, 35.4, 43.4, 35.8, 13),
ymax = -c(27, 33.4, 37.4, 31.5, 34.4, 42.4, 34.8, 12),
city = c("Brisbane", "Sydney", "Melbourne", "Perth", "Adelaide", "Hobart", "Canberra", "Darwin")
)
## PLOTS ## --------------------------------------------------------------------
# SA4 level - HT vs modeled ####
b_est$summ_mu_sa4 %>%
ggplot(aes(y = median, ymin = lower, ymax = upper,
x = HT, xmin = HT_lower, xmax = HT_upper))+
theme_bw()+geom_abline(col="red")+
geom_errorbar(col = "grey")+geom_errorbarh(col = "grey")+
geom_point()+
facet_grid(.~model)+
labs(y = "Modelled prevalence estimate",
x = "Direct prevalence estimate")
prev_median_wide
prev_median_wide %>%
left_join(map_sa2, by = "ps_area")
map <- prev_median_wide %>%
left_join(map_sa2, by = "ps_area")
globalG.test(map$TSLN, nb2listw(map, style="B"))
spdep::globalG.test(map$TSLN, nb2listw(map, style="B"))
spdep::globalG.test(map$TSLN, spdep::nb2listw(map, style="B"))
spdep::globalG.test(map$TSLN, spdep::nb2listw(spdep::poly2nb(map), style="B"))
map <- prev_median_wide %>%
left_join(map_sa2, by = "ps_area") %>%
st_as_sf()
library(spdep)
globalG.test(map$TSLN, nb2listw(poly2nb(map), style="B"))
map <- prev_median_wide %>%
left_join(.,map_sa2, by = "ps_area") %>%
st_as_sf()
globalG.test(map$TSLN, nb2listw(poly2nb(map), style="B"))
map <- prev_median_wide %>%
left_join(.,map_sa2, by = "ps_area") %>%
st_as_sf() %>%
filter(st_is_empty(.))
map <- prev_median_wide %>%
left_join(.,map_sa2, by = "ps_area") %>%
st_as_sf() %>%
filter(!st_is_empty(.))
globalG.test(map$TSLN, nb2listw(poly2nb(map), style="B"))
globalG.test(map$TSLN, nb2listw(poly2nb(map), style="B", zero.policy = TRUE))
map$state
map$state
map <- prev_median_wide %>%
left_join(.,map_sa2, by = "ps_area") %>%
st_as_sf() %>%
filter(!st_is_empty(.), state == "8")
globalG.test(map$TSLN, nb2listw(poly2nb(map), style="B", zero.policy = TRUE))
ggplot(map) %>% geom_sf()
ggplot(map) + geom_sf()
library(tidyverse)
library(sf)
library(spdep)
library(mvtnorm)
library(rstan)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
#' @title getGRID
#' @description creates a sf object that is a grid of specified size
#' @param M target number of areas
#' @returns A list of two objects: sf is a data.frame/sf object with the geometry for the grid, W is the binary weight matrix based on queen contiguity
getGRID <- function(M){
out <- list()
# provides the height and length dimensions for the grid that are as close to the specified M as possible
dims <- c(floor(sqrt(M)), floor(M/floor(sqrt(M))))
df <- data.frame(lon = c(0, dims[1]),
lat = c(0, dims[2])) %>%
st_as_sf(coords = c("lon", "lat")) %>%
st_bbox() %>%
st_as_sfc()
out$sf <- sf::st_make_grid(df, square = T, cellsize = c(1, 1)) %>%
sf::st_sf() %>%
dplyr::mutate(id = row_number())
out$W <- nb2mat(poly2nb(out$sf, queen = T), style="B") #binary
#message(paste0("Created an sf object with ", prod(dims), " rows"))
return(out)
}
W <- getGRID(6)$W
W
W %*% W
W <- getGRID(100)$W
W
W[1:6,1:6]
(W%*%W)[1:6,1:6]
d <- (W%*%W)
b <- 1
(1-(d/b)^2)^2
t <- getGRID(100)
W <- t$W
d <- (W%*%W)
b <- 1
(1-(d/b)^2)^2
we = (1-(d/b)^2)^2
ggplot(t$sf)+
geom_sf(fill = we[1,])
ggplot(t$sf)+
geom_sf(aes(fill = we[1,]))
ggplot(t$sf)+
geom_sf(aes(fill = d[1,]))
ggplot(t$sf)+
geom_sf(aes(fill = d[40,]))
ggplot(t$sf)+
geom_sf(aes(fill = d[35,m]))
ggplot(t$sf)+
geom_sf(aes(fill = d[35,]))
ggplot(t$sf)+
geom_sf(aes(fill = W[35,]))
ggplot(t$sf)+
geom_sf(aes(fill = d[35,]))
ggplot(t$sf)+
geom_sf(aes(fill = we[35,]))
diag(d) <- 0
d
t <- getGRID(100)
W <- t$W
d <- (W%*%W)
ggplot(t$sf)+
geom_sf(aes(fill = d[35,]))
diag(d) <- 0
ggplot(t$sf)+
geom_sf(aes(fill = d[35,]))
t <- getGRID(100)
W <- t$W
d <- (W%*%W)
diag(d) <- 0
d <- d/rowSums(d)
b <- 1
we = (1-(d/b)^2)^2
ggplot(t$sf)+
geom_sf(aes(fill = d[35,]))
ggplot(t$sf)+
geom_sf(aes(fill = we[35,]))
b <- 0.01
we = (1-(d/b)^2)^2
ggplot(t$sf)+
geom_sf(aes(fill = we[35,]))
t <- getGRID(100)
W <- t$W
d <- (W%*%W)
diag(d) <- 0
d <- d/rowSums(d)
ggplot(t$sf)+
geom_sf(aes(fill = we[35,]))
t <- getGRID(100)
W <- t$W
d <- (W%*%W)
diag(d) <- 0
d <- d/rowSums(d)
ggplot(t$sf)+
geom_sf(aes(fill = d[35,]))
library(rgeoda)
install.packages(rgeoda)
install.packages("rgeoda")
library(rgeoda)
?skater
t <- getGRID(6)
queen_weights(t$sf)
ygh <- queen_weights(t$sf)
ygh$gda_w
ygh$GetNeighbors
ygh$gda_w
ygh <- queen_weights(t$sf, order = 2)
ygh$gda_w
t <- getGRID(100)
queen_weights(t$sf, order = 1)
queen_weights(t$sf, order = 2)
t <-queen_weights(t$sf, order = 2)
t
as.matix(t$gda_w)
as.matrix(t$gda_w)
nb2matrix(t$gda_w)
nb2mat(t$gda_w)
t <- getGRID(100)
nb <- poly2nb(t$sf)
t <- getGRID(100)
W <- t$W
nb1 <- poly2nb(t$sf)
nb2 <- nblag(nb1, 2)
nb1_2 <- nblag_cumul(nb2)
W2 <- nb2mat(nb1_2)
W1 <- nb2mat(nb1)
ggplot(t$sf)+
geom_sf(aes(fill = W1[1,]))
ggplot(t$sf)+
geom_sf(aes(fill = W2[1,]))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W2[1,])))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W1[1,])))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W2[1,])))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W2[50,])))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W2[45,])))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W1[45,])))
d <- (W1%*%1W)
diag(d) <- 0
d <- d/rowSums(d)
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W1[45,])))
d <- (W1%*%W1)
diag(d) <- 0
d <- d/rowSums(d)
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(W1[45,])))
ggplot(t$sf)+
geom_sf(aes(fill = as.factor(d[45,])))
setwd("~/OneDrive - Queensland University of Technology/R Projects/Two-stage logistic-beta model")
rm(list=ls())
library(tidyverse)
library(patchwork)
library(knitr)
library(readr)
library(ggtext)
library(latex2exp)
cur_date <- "20221129"
pr_all <- readRDS(paste0("ResultsHPC/", cur_date, "/pr_all.rds"))
sim_list <- readRDS(paste0("ResultsHPC/", cur_date, "/sim_list.rds"))
loc_plots <- paste0("ResultsHPC/", cur_date, "/plots")
loc_sheets <- paste0("ResultsHPC/", cur_date, "/sheets")
## Temporary renaming functions ## ---------------------------------------------
filter_w_tsln <- function(.data){filter(.data, model %in% c("BETA", "s2LN",
"BIN", "LOG",
"ELN", "HT_Direct"))}
rename_w_tsln <- function(.data){
mutate(.data,
model = ifelse(model == "s2LN", "TSLN", model),
model = ifelse(model == "HT_Direct", "HT", model))
}
setwd("C:/r_proj/two_stage_saemodel_proportions")
rm(list=ls())
library(tidyverse)
library(patchwork)
library(knitr)
library(readr)
library(ggtext)
library(latex2exp)
setwd("C:/r_proj/two_stage_saemodel_proportions")
#cur_date <- "20230201"
# pr_all <- readRDS(paste0("ResultsHPC/", cur_date, "/pr_all.rds"))
# sim_list <- readRDS(paste0("ResultsHPC/", cur_date, "/sim_list.rds"))
# loc_plots <- paste0("ResultsHPC/", cur_date, "/plots")
# loc_sheets <- paste0("ResultsHPC/", cur_date, "/sheets")
pr_all <- readRDS("data/pr_all.rds")
sim_list <- readRDS("data/sim_list.rds")
loc_plots <- paste0("simulation_study/plots")
loc_sheets <- paste0("simulation_study/sheets")
filter_w_tsln <- function(.data){filter(.data, model %in% c("BETA", "s2LN",
"BIN", "LOG",
"ELN", "HT_Direct"))}
rename_w_tsln <- function(.data){
mutate(.data,
model = ifelse(model == "s2LN", "TSLN", model),
model = ifelse(model == "HT_Direct", "HT", model))
}
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
ggplot(aes(y = RRMSE, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario, scales = "free_y")+
labs(title = "",
y = "Mean relative root mean square error (MRRMSE)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BETA", "BIN", "ELN", "LOG", "**TSLN**"))+
scale_fill_discrete()+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario))
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "sc6"))
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "sc6"))
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "sc6")) %>%
# create plot
ggplot(aes(y = RRMSE, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario, scales = "free_y")+
labs(title = "",
y = "Mean relative root mean square error (MRRMSE)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BIN", "ELN", "LOG", "**TSLN**"))+
scale_fill_discrete()+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "Sc6")) %>%
mutate(Scenario = case_when(Scenario == "Sc1" ~ "50-50",
Scenario == "Sc3" ~ "Rare",
Scenario == "Sc5" ~ "Common")) %>%
# create plot
ggplot(aes(y = RRMSE, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario, scales = "free_y")+
labs(title = "",
y = "Mean relative root mean square error (MRRMSE)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BIN", "ELN", "LOG", "**TSLN**"))+
scale_fill_discrete()+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
ggsave(paste0(loc_plots, "/sparse_MRRMSE.png"), width = 10, height = 8.35)
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
ggplot(aes(y = RRMSE, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario, scales = "free_y")+
labs(title = "",
y = "Mean relative root mean square error (MRRMSE)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BETA", "BIN", "ELN", "LOG", "**TSLN**"))+
scale_fill_discrete()+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
ggsave(paste0(loc_plots, "/MRRMSE.png"), width = 10, height = 8.35)
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "Sc6")) %>%
mutate(Scenario = case_when(Scenario == "Sc1" ~ "50-50",
Scenario == "Sc3" ~ "Rare",
Scenario == "Sc5" ~ "Common"))
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter_w_tsln() %>% rename_w_tsln() %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "Sc6")) %>%
mutate(Scenario = case_when(Scenario == "Sc1" ~ "50-50",
Scenario == "Sc3" ~ "Rare",
Scenario == "Sc5" ~ "Common")) %>%
# create plot
ggplot(aes(y = RRMSE, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario, scales = "free_y")+
labs(title = "",
y = "Mean relative root mean square error (MRRMSE)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BETA", "ELN", "LOG", "**TSLN**"))+
scale_fill_discrete()+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
ggsave(paste0(loc_plots, "/sparse_MRRMSE.png"), width = 10, height = 8.35)
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter(model %in% c("BETA", "s2LN", "LOG", "ELN")) %>%
mutate(model = ifelse(model == "s2LN", "TSLN", model)) %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
ggplot(aes(y = ARB, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario)+
labs(title = "",
y = "Mean absolute relative bias (MARB)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BETA", "ELN", "LOG", "**TSLN**"))+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
ggsave(paste0(loc_plots, "/MARB_noBIN.png"), width = 10, height = 8.35)
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter(model %in% c("BETA", "s2LN", "LOG", "ELN")) %>%
mutate(model = ifelse(model == "s2LN", "TSLN", model)) %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "Sc6")) %>%
mutate(Scenario = case_when(Scenario == "Sc1" ~ "50-50",
Scenario == "Sc3" ~ "Rare",
Scenario == "Sc5" ~ "Common")) %>%
# create plot
ggplot(aes(y = ARB, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario)+
labs(title = "",
y = "Mean absolute relative bias (MARB)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BETA", "ELN", "LOG", "**TSLN**"))+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
bind_rows(pr_all$spm_global, .id = "QaS") %>%
filter(model %in% c("BETA", "s2LN", "LOG", "ELN")) %>%
mutate(model = ifelse(model == "s2LN", "TSLN", model)) %>%
rename(Scenario = QaS) %>%
mutate(cl = as.factor(ifelse(model == "TSLN", 1, 0.8))) %>%
mutate(missing = as.factor(ifelse(missing == FALSE, "Sampled areas", "Nonsampled areas")),
missing = fct_relevel(missing, "Sampled areas"),
Scenario = paste0("Sc", Scenario)) %>%
# filter out BIN and Sc2, Sc4 and Sc6
filter(model != "BIN",
!Scenario %in% c("Sc2", "Sc4", "Sc6")) %>%
mutate(Scenario = case_when(Scenario == "Sc1" ~ "50-50",
Scenario == "Sc3" ~ "Rare",
Scenario == "Sc5" ~ "Common")) %>%
# create plot
ggplot(aes(y = ARB, x = model, fill = model, alpha = cl))+
geom_boxplot()+theme_bw()+
facet_grid(missing~Scenario)+
labs(title = "",
y = "Mean absolute relative bias (MARB)",
x = "")+
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("BETA", "ELN", "LOG", "**TSLN**"))+
theme(text=element_text(size=18),
axis.text.x = element_markdown(),
legend.position = "null")
ggsave(paste0(loc_plots, "/sparse_MARB_noBIN.png"), width = 10, height = 8.35)
